[PLATFORMS]
ALL

[PERMUTATIONS]


BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
INSTANCING

[MATERIALPARAMETER]


Texture2D BaseTexture;

Texture2D NormalTexture;

Texture2D MetallicTexture;

Texture2D RoughnessTexture;

Texture2D EmissiveTexture;

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;
float MaskThreshold @Default(0.25);

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>

[VERTEXSHADER]


#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#include <Shaders/Materials/DefaultMaterialCB.h>
#include <Shaders/Materials/MaterialVertexShader.h>

VS_OUT main(VS_IN Input)
{
  return FillVertexData(Input);
}

[PIXELSHADER]


#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_SIMPLE_MATERIAL_MODEL


#include <Shaders/Materials/DefaultMaterialCB.h>
#include <Shaders/Materials/MaterialPixelShader.h>
#include <Shaders/Common/VisualShaderUtil.h>



Texture2D BaseTexture;
SamplerState BaseTexture_AutoSampler;

Texture2D NormalTexture;
SamplerState NormalTexture_AutoSampler;

Texture2D MetallicTexture;
SamplerState MetallicTexture_AutoSampler;

Texture2D RoughnessTexture;
SamplerState RoughnessTexture_AutoSampler;

Texture2D EmissiveTexture;
SamplerState EmissiveTexture_AutoSampler;



float3 GetBaseColor(PS_IN Input)
{
  return ToColor3(BaseTexture.Sample(BaseTexture_AutoSampler, ToFloat2(Input.TexCoords)));
}

float3 GetNormal(PS_IN Input)
{
  return TangentToWorldSpace(ToFloat3((NormalTexture.Sample(NormalTexture_AutoSampler, ToFloat2(Input.TexCoords)).xyz * 2.0 - 1.0)), Input);
}

float GetMetallic(PS_IN Input)
{
  return saturate(ToFloat1(MetallicTexture.Sample(MetallicTexture_AutoSampler, ToFloat2(Input.TexCoords)).x));
}

float GetReflectance(PS_IN Input)
{
  return saturate(ToFloat1(0.5));
}

float GetRoughness(PS_IN Input)
{
  return saturate(ToFloat1(RoughnessTexture.Sample(RoughnessTexture_AutoSampler, ToFloat2(Input.TexCoords)).x));
}

float GetOpacity(PS_IN Input)
{
  #if BLEND_MODE == BLEND_MODE_MASKED
    return ToFloat1(1) - MaskThreshold;
  #else
    return ToFloat1(1);
  #endif
}

float3 GetEmissiveColor(PS_IN Input)
{
  return ToColor3((ToBiggerType((ToBiggerType(EmissiveTexture.Sample(EmissiveTexture_AutoSampler, ToFloat2(Input.TexCoords)), float4(0.401978, 0, 0, 1)) * ToBiggerType(float4(0.401978, 0, 0, 1), EmissiveTexture.Sample(EmissiveTexture_AutoSampler, ToFloat2(Input.TexCoords)))), 100) * ToBiggerType(100, (ToBiggerType(EmissiveTexture.Sample(EmissiveTexture_AutoSampler, ToFloat2(Input.TexCoords)), float4(0.401978, 0, 0, 1)) * ToBiggerType(float4(0.401978, 0, 0, 1), EmissiveTexture.Sample(EmissiveTexture_AutoSampler, ToFloat2(Input.TexCoords)))))));
}

float GetOcclusion(PS_IN Input)
{
  return saturate(ToFloat1(1));
}

