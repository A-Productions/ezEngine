[PLATFORMS]
ALL

[PERMUTATIONS]

[RENDERSTATE]

DepthTest = false
DepthTestFunc = CompareFunc_Less
DepthWrite = false
CullMode = CullMode_None

[VERTEXSHADER]

#include <Shaders/Pipeline/FullscreenTriangleVertexShader.h>

[PIXELSHADER]

struct PS_IN
{
  float4 Position : SV_Position;
  float2 TexCoord0 : TEXCOORD0;
};

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/Common.h>
#include "LSAOConstants.h"
#include "Utils.h"

Texture2D DepthBuffer : register(t0);
Texture2D SSAOGatherOutput : register(t1);
SamplerState PointClampSampler;


float4 main(PS_IN input) : SV_Target
{
  float2 pixelSize = ViewportSize.zw;

  float centerPixelDepth = LinearizeZBufferDepth(DepthBuffer.Sample(PointClampSampler, input.TexCoord0).r);
  float totalSSAO = SSAOGatherOutput.Sample(PointClampSampler, input.TexCoord0).r;
  float totalWeight = 1.0f;

  float2 texcoords[8] =
  {
    input.TexCoord0 + float2(pixelSize.x, pixelSize.y),
    input.TexCoord0 + float2(0.0f, pixelSize.y),
    input.TexCoord0 + float2(-pixelSize.x, pixelSize.y),
    input.TexCoord0 + float2(-pixelSize.x, 0.0f),
    input.TexCoord0 + float2(-pixelSize.x, -pixelSize.y),
    input.TexCoord0 + float2(0.0f, -pixelSize.y),
    input.TexCoord0 + float2(pixelSize.x, -pixelSize.y),
    input.TexCoord0 + float2(pixelSize.x, 0.0f)
  };

  [unroll] for(int i=0; i<8; ++i)
  {
    float depth = LinearizeZBufferDepth(DepthBuffer.Sample(PointClampSampler, texcoords[i]).r);
    if (abs(centerPixelDepth - depth) < DepthCutoffDistance)
    {
      totalSSAO += SSAOGatherOutput.Sample(PointClampSampler, texcoords[i]).r;
      totalWeight += 1.0f;
    }
  }

  return (totalSSAO / totalWeight).xxxx;
}
