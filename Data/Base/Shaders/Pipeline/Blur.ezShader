[PLATFORMS] 
ALL

[PERMUTATIONS]



[RENDERSTATE]

DepthTest = false
DepthTestFunc = CompareFunc_Less
DepthWrite = false
CullMode = CullMode_None

[VERTEXSHADER]

struct VERTEX_DATA
{
  float3 Position : POSITION;
  float2 TexCoord0 : TEXCOORD0;
};

struct VS_TO_PS
{
  float4 Position : SV_Position;
  float2 TexCoord0 : TEXCOORD0;
};

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/ObjectConstants.h>
#include <Shaders/Materials/DefaultMaterialCB.inc>

#if EZ_ENABLED(PLATFORM_DX11)

VS_TO_PS main(VERTEX_DATA input)
{
  VS_TO_PS output;
  output.Position = float4(input.Position, 1.0f);
  output.TexCoord0 = input.TexCoord0;
  
  return output;
}

#endif


[PIXELSHADER]

struct VERTEX_DATA
{
  float3 Position : POSITION;
  float2 TexCoord0 : TEXCOORD0;
};

struct VS_TO_PS
{
  float4 Position : SV_Position;
  float2 TexCoord0 : TEXCOORD0;
};

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/ObjectConstants.h>
#include <Shaders/Materials/DefaultMaterialCB.inc>
#include "BlurConstants.h"

#if EZ_ENABLED(PLATFORM_DX11)

Texture2D Input;
SamplerState LinearClampSampler;

float4 main(VS_TO_PS input) : SV_Target
{
  float width, height, levels; 
  Input.GetDimensions(0, width, height, levels);
  float2 vPixelSize = float2(1.0f / width, 1.0f / height);

  // TODO I know this is stupid, give me a break ;-)
  float4 res = float4(0, 0, 0, 0);
  float fWeight = 1.0f / (BlurRadius * 2 + 1);
  for (int i = -BlurRadius; i <= BlurRadius; ++i )
  {
    res += Input.Sample(LinearClampSampler, input.TexCoord0 + float2(i* 1.5f * vPixelSize.x, 0.0f)) * fWeight;
  }

  return res;
}

#endif

