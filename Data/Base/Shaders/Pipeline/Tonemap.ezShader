[PLATFORMS] 
ALL

[PERMUTATIONS]

[RENDERSTATE]

DepthTest = false
DepthWrite = false
CullMode = CullMode_None

[VERTEXSHADER]

#include <Shaders/Pipeline/FullscreenTriangleVertexShader.inc>

[PIXELSHADER]

#include <Shaders/Common/Common.inc>
#include <Shaders/Common/GlobalConstants.h>
#include "TonemapConstants.h"

struct PS_IN
{
	float4 Position : SV_Position;
	float2 TexCoord0 : TEXCOORD0;
};

#if EZ_ENABLED(PLATFORM_DX11)

// From http://filmicgames.com/archives/75
float3 FilmicTonemap(float3 x)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;

	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

float nrand( float2 seed )
{
	return frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453);
}

// From https://www.shadertoy.com/view/4t2SDh
float3 TriangularNoise( float2 screenPos )
{
	float t = frac( GlobalTime );
	float nrnd0 = nrand( screenPos + 0.07*t );
	
    // Convert uniform distribution into triangle-shaped distribution.
    float orig = nrnd0 * 2.0 - 1.0;
    nrnd0 = max(-1.0f, orig * rsqrt(abs(orig)));
    nrnd0 = nrnd0 - sign(orig) + 0.5;
	
	return nrnd0 / 255.0;
}

// From http://media.steampowered.com/apps/valve/2015/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf
float3 ScreenSpaceDither( float2 screenPos )
{
	// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360
	float3 dither = dot( float2( 171.0, 231.0 ), screenPos.xy + GlobalTime ).xxx;
	dither.rgb = frac( dither.rgb / float3( 103.0, 71.0, 97.0 ) ) - float3( 0.5, 0.5, 0.5 );
	return ( dither.rgb / 255.0 ) * 0.375;
}

Texture2D VignettingTexture;
SamplerState VignettingTextureSampler;

Texture2D SceneColorTexture;

float4 main(PS_IN Input) : SV_Target
{
	float4 sceneColor = SceneColorTexture.Load(int3(Input.Position.xy, 0));
	
	// Bloom
	// TODO
	
	// Vignetting
	float3 vignetting = VignettingTexture.SampleLevel(VignettingTextureSampler, Input.TexCoord0.xy, 0.0).rgb;
	sceneColor.rgb *= vignetting;
	
	// Tonemapping
	sceneColor.rgb *= ExposureBias;	
	float3 color = FilmicTonemap(sceneColor.rgb);
	
	float3 whiteScale = 1.0 / FilmicTonemap(11.2);
	color = saturate(color * whiteScale);
	
	// Color correction
	float luminance = GetLuminance(color);
	
	float3 moodColor = lerp(0.0, MoodColor, saturate(luminance * 2.0));
	moodColor = lerp(moodColor, 1.0, saturate(luminance - 0.5) * 2.0);
	color = lerp(color, moodColor, saturate( luminance * MoodStrength ));
	
	color = lerp(luminance.xxx, color, Saturation);
	color = pow(color, Contrast); // TODO proper contrast modification
	
	// Convert to Srgb before dither
	color = LinearToSrgb(color);
	
	// Dither
	// TODO blue noise
	#if 1
		color += TriangularNoise(Input.TexCoord0.xy);
	#else
		color += ScreenSpaceDither(Input.Position.xy);
	#endif
	
	return float4(color, sceneColor.a);
}

#endif

