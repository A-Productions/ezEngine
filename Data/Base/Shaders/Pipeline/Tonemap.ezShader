[PLATFORMS] 
ALL

[PERMUTATIONS]

[RENDERSTATE]

DepthTest = false
DepthWrite = false
CullMode = CullMode_None

[VERTEXSHADER]

#include <Shaders/Pipeline/FullscreenTriangleVertexShader.inc>

[PIXELSHADER]

#include <Shaders/Common/Common.inc>
#include <Shaders/Common/GlobalConstants.h>
#include "TonemapConstants.h"

struct PS_IN
{
	float4 Position : SV_Position;
	float2 TexCoord0 : TEXCOORD0;
};

#if EZ_ENABLED(PLATFORM_DX11)

// From http://filmicgames.com/archives/75
float3 FilmicTonemap(float3 x)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;

	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

Texture2D VignettingTexture;
SamplerState VignettingTextureSampler;

Texture2D NoiseTexture;
SamplerState NoiseTextureSampler;

Texture2D SceneColorTexture;

float3 ScreenSpaceDither( float2 texCoords )
{
	float t = frac( GlobalTime );
	texCoords = (texCoords + t) * (Viewport.zw / 256.0);
	
	// map to -0.5..1.5 bit range for an 8bit output target
	return NoiseTexture.SampleLevel(NoiseTextureSampler, texCoords, 0.0).rgb * (2.0 / 255.0) - (0.5 / 255.0);
}

float4 main(PS_IN Input) : SV_Target
{
	float4 sceneColor = SceneColorTexture.Load(int3(Input.Position.xy, 0));
	
	// Bloom
	// TODO
	
	// Vignetting
	float3 vignetting = VignettingTexture.SampleLevel(VignettingTextureSampler, Input.TexCoord0.xy, 0.0).rgb;
	sceneColor.rgb *= vignetting;
	
	// Tonemapping
	sceneColor.rgb *= Exposure;	
	float3 color = FilmicTonemap(sceneColor.rgb);
	
	float3 whiteScale = 1.0 / FilmicTonemap(11.2);
	color = saturate(color * whiteScale);
	
	// Color correction
	float luminance = GetLuminance(color);
	
	float3 moodColor = lerp(0.0, MoodColor.rgb, saturate(luminance * 2.0));
	moodColor = lerp(moodColor, 1.0, saturate(luminance - 0.5) * 2.0);
	color = lerp(color, moodColor, saturate( luminance * MoodStrength ));
	
	color = lerp(luminance.xxx, color, Saturation);
	color = pow(color, Contrast); // TODO proper contrast modification 
	
	// Cheap approx convert to sRGB before dither
	color = sqrt(color);
	
	// Dither
	color += ScreenSpaceDither(Input.TexCoord0.xy);
	
	// Convert back to linear
	color *= color;
	
	return float4(color, sceneColor.a);
}

#endif

