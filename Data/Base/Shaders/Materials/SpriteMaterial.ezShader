[PLATFORMS]
ALL

[PERMUTATIONS]

RENDER_PASS
MSAA
TWO_SIDED = FALSE
CAMERA_MODE = CAMERA_MODE_PERSPECTIVE

[RENDERSTATE]

DepthTest = true
DepthWrite = true

[VERTEXSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#if (RENDER_PASS == RENDER_PASS_EDITOR) || (RENDER_PASS == RENDER_PASS_PICKING) || (RENDER_PASS == RENDER_PASS_PICKING_WIREFRAME)
  #define USE_GAME_OBJECT_ID
#endif

#if defined(USE_GAME_OBJECT_ID)
	#define CUSTOM_INTERPOLATOR float4 GameObjectID : GAME_OBJECT_ID;
#endif

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Materials/MaterialInterpolator.h>

#if EZ_ENABLED(PLATFORM_DX11)

struct SpriteData
{
	float3 worldSpacePosition;
	uint size;
	uint color;
	uint texCoordScale;
	uint texCoordOffset;
	uint gameObjectID;
};

StructuredBuffer<SpriteData> spriteData;

VS_OUT main(uint VertexID : SV_VertexID)
{
	float2 vertexPositions[6] =
	{
		float2(0.0, 0.0),
		float2(0.0, 1.0),
		float2(1.0, 1.0),
		float2(0.0, 0.0),
		float2(1.0, 1.0),
		float2(1.0, 0.0),
	};

	uint index = VertexID / 6;
	uint vertexIndex = VertexID % 6;

	float2 texCoords = vertexPositions[vertexIndex];
	float2 vertexPosition = (texCoords - 0.5);

	texCoords.y = 1.0 - texCoords.y;

	SpriteData data = spriteData[index];
	float3 worldPosition = data.worldSpacePosition;
	float4 screenPosition = mul(GetWorldToScreenMatrix(), float4(worldPosition, 1.0));

	float distance = screenPosition.w;
	float2 scale = mul(GetCameraToScreenMatrix(), float4(1.0, 1.0, distance, 1.0)).xy;

	float2 size = RG16FToFloat2(data.size);
	scale *= size.x;

	if (size.y > 0.0)
	{
		float2 maxScreenSize = (size.y * distance * 2.0) * ViewportSize.zw;
		scale = min(scale, maxScreenSize);
	}

	screenPosition.xy += vertexPosition * scale;

	float2 texCoordScale = RG16FToFloat2(data.texCoordScale);
	float2 texCoordOffset = RG16FToFloat2(data.texCoordOffset);

	VS_OUT Output;
	Output.Position = screenPosition;
	Output.TexCoords = texCoords * texCoordScale + texCoordOffset;
	Output.Color = RGBA8ToFloat4(data.color);

	#if defined(USE_GAME_OBJECT_ID)
		Output.GameObjectID = RGBA8ToFloat4(data.gameObjectID);
	#endif

	return Output;
}

#endif


[PIXELSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#if (RENDER_PASS == RENDER_PASS_EDITOR) || (RENDER_PASS == RENDER_PASS_PICKING) || (RENDER_PASS == RENDER_PASS_PICKING_WIREFRAME)
  #define USE_GAME_OBJECT_ID
#endif

#if defined(USE_GAME_OBJECT_ID)
	#define CUSTOM_INTERPOLATOR float4 GameObjectID : GAME_OBJECT_ID;
#endif

#if MSAA
	#define USE_ALPHA_TEST_SUPER_SAMPLING
#endif

#include <Shaders/Materials/MaterialHelper.h>

#if EZ_ENABLED(PLATFORM_DX11)

struct PS_OUT
{
	#if RENDER_PASS != RENDER_PASS_DEPTH_ONLY
		float4 Color : SV_Target;
	#endif

	#if defined(USE_ALPHA_TEST_SUPER_SAMPLING)
		uint Coverage : SV_Coverage;
	#endif
};

Texture2D SpriteTexture;
SamplerState SpriteTexture_AutoSampler;

float GetOpacity(PS_IN Input)
{
	float alpha = SpriteTexture.Sample(SpriteTexture_AutoSampler, Input.TexCoords.xy).a * Input.Color.a;
	return alpha - 0.5;
}

PS_OUT main(PS_IN Input)
{
	uint coverage = CalculateCoverage(Input);
	if (coverage == 0)
	{
		discard;
	}
  
  float4 color = SpriteTexture.Sample(SpriteTexture_AutoSampler, Input.TexCoords.xy) * Input.Color;

	PS_OUT Output;
  
	#if (RENDER_PASS == RENDER_PASS_PICKING) || (RENDER_PASS == RENDER_PASS_PICKING_WIREFRAME)
		Output.Color = Input.GameObjectID;
  #elif RENDER_PASS == RENDER_PASS_EDITOR
    if (RenderPass == EDITOR_RENDER_PASS_STATIC_VS_DYNAMIC)
    {
      Output.Color = ColorizeGameObjectId(gameObjectId);
    }
    else
    {
      Output.Color = color;
    }
	#elif RENDER_PASS != RENDER_PASS_DEPTH_ONLY
		Output.Color = color;
	#endif

	#if defined(USE_ALPHA_TEST_SUPER_SAMPLING)
		Output.Coverage = coverage;
	#endif

	return Output;
}

#endif

