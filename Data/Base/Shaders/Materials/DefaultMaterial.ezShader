[PLATFORMS]
ALL

[PERMUTATIONS]

BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
INSTANCING
DEFAULT_MAT_USE_BASE_TEXTURE
DEFAULT_MAT_USE_NORMAL_TEXTURE
DEFAULT_MAT_USE_METALLIC_TEXTURE
DEFAULT_MAT_USE_ROUGHNESS_TEXTURE

[MATERIALPARAMETER]

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;

float MaskThreshold @Default(0.25);

Permutation DEFAULT_MAT_USE_BASE_TEXTURE;
Texture2D BaseTexture;
Color BaseColor @Default(1.0, 1.0, 1.0);

Permutation DEFAULT_MAT_USE_NORMAL_TEXTURE;
Texture2D NormalTexture;

Permutation DEFAULT_MAT_USE_METALLIC_TEXTURE;
Texture2D MetallicTexture;
float MetallicValue @Default(0.0) @Clamp(0.0, 1.0);

Permutation DEFAULT_MAT_USE_ROUGHNESS_TEXTURE;
Texture2D RoughnessTexture;
float RoughnessValue @Default(0.7) @Clamp(0.0, 1.0);

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>

[VERTEXSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#include <Shaders/Materials/DefaultMaterialCB.h>
#include <Shaders/Materials/MaterialVertexShader.h>

VS_OUT main(VS_IN Input)
{
  return FillVertexData(Input);
}

[PIXELSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_SIMPLE_MATERIAL_MODEL

#include <Shaders/Materials/DefaultMaterialCB.h>
#include <Shaders/Materials/MaterialPixelShader.h>

Texture2D BaseTexture;
SamplerState BaseTexture_AutoSampler;

Texture2D NormalTexture;
SamplerState NormalTexture_AutoSampler;

Texture2D MetallicTexture;
SamplerState MetallicTexture_AutoSampler;

Texture2D RoughnessTexture;
SamplerState RoughnessTexture_AutoSampler;

float3 GetNormal(PS_IN Input)
{
	#if DEFAULT_MAT_USE_NORMAL_TEXTURE == TRUE
		float3 vNt = NormalTexture.Sample(NormalTexture_AutoSampler, Input.TexCoords.xy).rgb * 2.0f - 1.0f;
		return vNt.x * Input.Tangent + vNt.y * Input.BiTangent + vNt.z * Input.Normal;
	#else
		return Input.Normal;
	#endif
}

float3 GetBaseColor(PS_IN Input)
{
	#if DEFAULT_MAT_USE_BASE_TEXTURE == TRUE
		return BaseTexture.Sample(BaseTexture_AutoSampler, Input.TexCoords.xy).rgb * BaseColor.rgb;
	#else
		return BaseColor.rgb;
	#endif
}

float GetMetallic(PS_IN Input)
{
	#if DEFAULT_MAT_USE_METALLIC_TEXTURE == TRUE
		return MetallicTexture.Sample(MetallicTexture_AutoSampler, Input.TexCoords.xy).r;
	#else
		return MetallicValue;
	#endif
}

float GetReflectance(PS_IN Input)
{
	return 0.5f;
}

float GetRoughness(PS_IN Input)
{
	#if DEFAULT_MAT_USE_ROUGHNESS_TEXTURE == TRUE
		return RoughnessTexture.Sample(RoughnessTexture_AutoSampler, Input.TexCoords.xy).r;
	#else
		return RoughnessValue;
	#endif
}

float GetOpacity(PS_IN Input)
{
	#if DEFAULT_MAT_USE_BASE_TEXTURE == TRUE
		float opacity = BaseTexture.Sample(BaseTexture_AutoSampler, Input.TexCoords.xy).a * BaseColor.a;
	#else
		float opacity = BaseColor.a;
	#endif

	#if BLEND_MODE == BLEND_MODE_MASKED
		return opacity - MaskThreshold;
	#else
		return opacity;
	#endif
}
