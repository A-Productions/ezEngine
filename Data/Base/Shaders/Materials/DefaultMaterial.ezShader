[PLATFORMS] 
ALL

[PERMUTATIONS]

BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
DEFAULT_MAT_USE_DIFFUSE_TEXTURE

[MATERIALPARAMETER]

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;

Permutation DEFAULT_MAT_USE_DIFFUSE_TEXTURE;
Color DiffuseColor @Default(1.0, 1.0, 1.0);
Texture2D DiffuseTexture;
Texture2D NormalTexture;

float MetallicValue @Default(0.0) @Clamp(0.0, 1.0);

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.inc>

[VERTEXSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#include <Shaders/Materials/DefaultMaterialCB.inc>
#include <Shaders/Materials/MaterialVertexShader.inc>

VS_OUT main(VS_IN Input)
{
  return FillVertexData(Input);
}

[PIXELSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_SIMPLE_MATERIAL_MODEL

#include <Shaders/Materials/DefaultMaterialCB.inc>
#include <Shaders/Materials/MaterialPixelShader.inc>

Texture2D DiffuseTexture;
SamplerState DiffuseTextureSampler;
Texture2D NormalTexture;
SamplerState NormalTextureSampler;

float3 GetNormal(PS_IN Input)
{
	//return Input.Normal;
	float3 vNt = NormalTexture.Sample(NormalTextureSampler, Input.TexCoords.xy).rgb * 2 - 1;
	float3 vNout = normalize( vNt.x * Input.Tangent + vNt.y * Input.BiTangent + vNt.z * Input.Normal );
	return vNout;
}

float3 GetDiffuseColor(PS_IN Input)
{
	#if DEFAULT_MAT_USE_DIFFUSE_TEXTURE == TRUE
		return DiffuseTexture.Sample(DiffuseTextureSampler, Input.TexCoords.xy).rgb * DiffuseColor.rgb;
	#else
		return DiffuseColor.rgb;
	#endif
}

float GetMetallic(PS_IN Input)
{
	return 0.0f;
}

float GetReflectance(PS_IN Input)
{
	return 0.5f;
}
	
float GetRoughness(PS_IN Input)
{
	return 0.7f;
}

float GetOpacity(PS_IN Input)
{
	#if DEFAULT_MAT_USE_DIFFUSE_TEXTURE == TRUE
		float opacity = DiffuseTexture.Sample(DiffuseTextureSampler, Input.TexCoords.xy).a * DiffuseColor.a;
	#else
		float opacity = DiffuseColor.a;
	#endif
	
	#if BLEND_MODE == BLEND_MODE_MASKED
		//return opacity - MaskThreshold;
		return opacity - 0.1f;
	#else
		return opacity;
	#endif
}
