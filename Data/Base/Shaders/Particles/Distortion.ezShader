[PLATFORMS]
ALL

[PERMUTATIONS]
PARTICLE_RENDER_MODE
SHADING_QUALITY=SHADING_QUALITY_NORMAL

[RENDERSTATE]

BlendingEnabled0 = true
SourceBlend0 = Blend_SrcAlpha

DepthTest = true
DepthWrite = false
DestBlend0 = Blend_InvSrcAlpha

[VERTEXSHADER]

#include <Shaders/Particles/ParticleCommonVS.h>
#include <Shaders/Particles/BillboardShaderData.h>

VS_OUT main(uint VertexID : SV_VertexID)
{
  uint dataIndex = CalcQuadParticleDataIndex(VertexID);
  uint vertexIndex = CalcQuadParticleVertexIndex(VertexID);

  ezBaseParticleShaderData baseParticle = particleBaseData[dataIndex];
  ezBillboardParticleData billboardParticle = particleBillboardData[dataIndex];

  VS_OUT ret;
  ret.Position = CalcQuadOutputPositionAsBillboard(vertexIndex, billboardParticle.Transform, baseParticle.Size);
  ret.TexCoords = ComputeSpriteAnimationTexCoord(QuadTexCoords[vertexIndex], NumSpritesX, NumSpritesY, baseParticle.Life);
  ret.Color = RGBA8ToFloat4(baseParticle.Color);

  return ret;
}

[PIXELSHADER]

#include <Shaders/Particles/ParticleCommonPS.h>

Texture2D ParticleMaskTexture;
SamplerState ParticleMaskTexture_AutoSampler;

Texture2D ParticleDistortionTexture;
SamplerState ParticleDistortionTexture_AutoSampler;

float4 main(PS_IN Input) : SV_Target
{
  float4 texCol = ParticleMaskTexture.Sample(ParticleMaskTexture_AutoSampler, Input.TexCoords.xy);

  float proximityFadeOut = CalcProximityFadeOut(Input.Position);

  float opacity = Input.Color.a * texCol.a * proximityFadeOut;

  clip(opacity - 0.01);

  float4 texDistort = ParticleDistortionTexture.Sample(ParticleDistortionTexture_AutoSampler, Input.TexCoords.xy);
  float3 sceneColor = SampleSceneColor(Input.Position.xy + (texDistort - 0.5) * float2(DistortionStrength, DistortionStrength));

  return float4(sceneColor.rgb * Input.Color.rgb, opacity);
}
