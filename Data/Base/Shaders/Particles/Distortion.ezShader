[PLATFORMS]
ALL

[PERMUTATIONS]
PARTICLE_RENDER_MODE
SHADING_QUALITY=SHADING_QUALITY_NORMAL

[RENDERSTATE]

BlendingEnabled0 = true
SourceBlend0 = Blend_SrcAlpha

DepthTest = true
DepthWrite = false
DestBlend0 = Blend_InvSrcAlpha

[VERTEXSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Materials/MaterialInterpolator.h>
#include <Shaders/Particles/BillboardShaderData.h>
#include <Shaders/Particles/ParticleHelpers.h>

#if EZ_ENABLED(PLATFORM_DX11)

VS_OUT main(uint VertexID : SV_VertexID)
{
  float2 texCoords[6] =
  {
    float2(0.0, 0.0),
    float2(1.0, 0.0),
    float2(1.0, 1.0),
    float2(0.0, 0.0),
    float2(1.0, 1.0),
    float2(0.0, 1.0),
  };

  uint index = VertexID / 6;
  uint vertexIndex = VertexID % 6;

  ezBillboardParticleData particle = particleData[index];

  float4 position = TransformToPosition(particle.Transform);
  float3x3 rotation = TransformToRotation(particle.Transform);

  float3 offsetRight = GetCameraDirRight() * (texCoords[vertexIndex].x - 0.5) * particle.Size;
  float3 offsetUp = GetCameraDirUp() * (texCoords[vertexIndex].y - 0.5) * -particle.Size;

  float3 offsetRightCS = mul(GetWorldToCameraMatrix(), float4(offsetRight, 0)).xzy;
  float3 offsetUpCS = mul(GetWorldToCameraMatrix(), float4(offsetUp, 0)).xzy;

  offsetRightCS = mul(rotation, offsetRightCS);
  offsetUpCS = mul(rotation, offsetUpCS);

  float4 worldPosition = mul(ObjectToWorldMatrix, position);
  float4 cameraPosition = mul(GetWorldToCameraMatrix(), worldPosition);
  cameraPosition.xzy = cameraPosition.xzy + offsetRightCS + offsetUpCS;
  float4 screenPosition = mul(GetCameraToScreenMatrix(), cameraPosition);

  VS_OUT ret;
  ret.TexCoords = ComputeSpriteAnimationTexCoord(texCoords[vertexIndex], NumSpritesX, NumSpritesY, particle.Life);
  ret.Position = screenPosition;
  ret.Color = RGBA8ToFloat4(particle.Color);

  return ret;
}

#endif


[PIXELSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#include <Shaders/Materials/MaterialInterpolator.h>
#include "ParticleSystemConstants.h"
#include <Shaders/Common/Lighting.h>

#if EZ_ENABLED(PLATFORM_DX11)

Texture2D ParticleMaskTexture;
SamplerState ParticleMaskTexture_AutoSampler;

Texture2D ParticleDistortionTexture;
SamplerState ParticleDistortionTexture_AutoSampler;

float4 main(PS_IN Input) : SV_Target
{
  float4 texCol = ParticleMaskTexture.Sample(ParticleMaskTexture_AutoSampler, Input.TexCoords.xy);

  float closeToGeometryFadeOut = DepthFade(Input.Position.xyw, 0.1);
  float distanceToCameraFadeOut = saturate(Input.Position.w / 0.5);

  float opacity = Input.Color.a * texCol.a * closeToGeometryFadeOut * distanceToCameraFadeOut;

  clip(opacity - 0.01);

  float4 texDistort = ParticleDistortionTexture.Sample(ParticleDistortionTexture_AutoSampler, Input.TexCoords.xy);
  float3 sceneColor = SampleSceneColor(Input.Position.xy + (texDistort - 0.5) * float2(DistortionStrength, DistortionStrength));

  return float4(sceneColor.rgb * Input.Color.rgb, opacity);
}

#endif

