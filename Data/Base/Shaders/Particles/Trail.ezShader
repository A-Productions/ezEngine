[PLATFORMS]
ALL

[PERMUTATIONS]

[RENDERSTATE]

BlendingEnabled0 = false
DestBlend0 = Blend_One
SourceBlend0 = Blend_InvSrcAlpha

DepthTest = true
DepthWrite = false
CullMode = CullMode_None

[VERTEXSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Materials/MaterialInterpolator.h>
#include <Shaders/Particles/TrailShaderData.h>

#if EZ_ENABLED(PLATFORM_DX11)

VS_OUT main(uint VertexID : SV_VertexID)
{
  float2 texCoords[6] =
  {
    float2(0.0, 0.0),
    float2(1.0, 0.0),
    float2(1.0, 1.0),
    float2(0.0, 0.0),
    float2(1.0, 1.0),
    float2(0.0, 1.0),
  };

  uint particleIndex = VertexID / (6 * TRAIL_SEGMENTS);
  uint trailPointIndex = (VertexID - (particleIndex * 6 * TRAIL_SEGMENTS)) / 6;
  uint vertexSubIndex = VertexID % 6;

  ezTrailParticleData particle = particleData[particleIndex];

  VS_OUT ret;

  if (trailPointIndex + 1 >= particle.NumPoints)
  {
    ret.Position = float4(0, 0, 0, 0);
    ret.TexCoords = float2(0, 0);
    ret.Color = float4(0, 1, 1, 0);
  }
  else
  {
    // doing this and then accessing the data will silently not work on nVidia cards and just result in the drawcall being ignored
    //ezTrailParticlePointsData trail = particlePointsData[particleIndex];

    float3 position1 = particlePointsData[particleIndex].Positions[trailPointIndex].xyz;
    float3 position2 = particlePointsData[particleIndex].Positions[trailPointIndex + 1].xyz;
    //float3 position3 = trail.Positions[trailPointIndex + 2];

    float3 dirRight = mul(ObjectToWorldMatrix, float4(position2 - position1, 0)).xyz;
    float3 dirUp = normalize(cross(dirRight, CameraDirForwards)) * particle.Size;

    float4 offsetRight = float4(dirRight * texCoords[vertexSubIndex].x, 0);
    float4 offsetUp = float4(dirUp * (texCoords[vertexSubIndex].y - 0.5), 0);

    float4 position = mul(ObjectToWorldMatrix, float4(position1, 1)) + offsetRight + offsetUp;

    ret.Position = mul(WorldToScreenMatrix, position);
    ret.TexCoords = texCoords[vertexSubIndex];
    ret.Color = RGBA8ToFloat4(particle.Color);
  }

  return ret;
}

#endif


[PIXELSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#include <Shaders/Materials/MaterialInterpolator.h>

#if EZ_ENABLED(PLATFORM_DX11)

Texture2D ParticleTexture;
SamplerState ParticleTexture_AutoSampler;

float4 main(PS_IN Input) : SV_Target
{
  //float4 color = ParticleTexture.Sample(ParticleTexture_AutoSampler, Input.TexCoords.xy);

  //return float4(color.rgb * Input.Color.rgb * Input.Color.a, color.a);
  return float4(Input.Color.rgb, 0.0);// 1.0 - Input.Color.a);
  //return float4(0, 1, 0, 0);
}

#endif

