[PLATFORMS]
ALL

[PERMUTATIONS]

PARTICLE_RENDER_MODE
SHADING_QUALITY=SHADING_QUALITY_NORMAL

[RENDERSTATE]

BlendingEnabled0 = true
SourceBlend0 = Blend_SrcAlpha

DepthTest = true
DepthWrite = false
CullMode = CullMode_None

#if PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_ADDITIVE
  DestBlend0 = Blend_One
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_BLENDED
  DestBlend0 = Blend_InvSrcAlpha
#elif PARTICLE_RENDER_MODE == PARTICLE_RENDER_MODE_OPAQUE
  BlendingEnabled0 = false
  DepthWrite = true
#endif

[VERTEXSHADER]

#include <Shaders/Particles/ParticleCommonVS.h>
#include <Shaders/Particles/BillboardShaderData.h>

VS_OUT main(uint VertexID : SV_VertexID)
{
  uint dataIndex = CalcQuadParticleDataIndex(VertexID);
  uint vertexIndex = CalcQuadParticleVertexIndex(VertexID);

  ezBaseParticleShaderData baseParticle = particleBaseData[dataIndex];
  ezBillboardParticleData billboardParticle = particleBillboardData[dataIndex];

  VS_OUT ret;
  ret.Position = CalcQuadOutputPositionAsBillboard(vertexIndex, billboardParticle.Transform, baseParticle.Size);
  ret.TexCoords = ComputeSpriteAnimationTexCoord(QuadTexCoords[vertexIndex], NumSpritesX, NumSpritesY, baseParticle.Life);
  ret.Color = RGBA8ToFloat4(baseParticle.Color);

  return ret;
}


[PIXELSHADER]

#include <Shaders/Particles/ParticleCommonPS.h>

Texture2D ParticleTexture;
SamplerState ParticleTexture_AutoSampler;

float4 main(PS_IN Input) : SV_Target
{
  float4 texCol = ParticleTexture.Sample(ParticleTexture_AutoSampler, Input.TexCoords.xy);

  float proximityFadeOut = CalcProximityFadeOut(Input.Position);

  float opacity = Input.Color.a * texCol.a * proximityFadeOut;

  clip(opacity - 0.01);

  return float4(texCol.rgb * Input.Color.rgb, opacity);
}

