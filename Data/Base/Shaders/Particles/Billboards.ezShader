[PLATFORMS]
ALL

[PERMUTATIONS]

[RENDERSTATE]

BlendingEnabled0 = true
DestBlend0 = Blend_One
SourceBlend0 = Blend_InvSrcAlpha

DepthTest = true
DepthWrite = false

[VERTEXSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Materials/MaterialInterpolator.inc>
#include <Shaders/Particles/ParticleSystemConstants.h>

#if EZ_ENABLED(PLATFORM_DX11)

struct ParticleData
{
	float3 position;
	float size;
	uint color;
	float dummy[3];
};

StructuredBuffer<ParticleData> particleData;

VS_OUT main(uint VertexID : SV_VertexID)
{
	float2 texCoords[6] =
	{
		float2(0.0, 0.0),
		float2(1.0, 0.0),
		float2(1.0, 1.0),
		float2(0.0, 0.0),
		float2(1.0, 1.0),
		float2(0.0, 1.0),
	};

	uint index = VertexID / 6;
	uint vertexIndex = VertexID % 6;

	ParticleData data = particleData[index];

	float3 offsetRight = CameraDirRight * (texCoords[vertexIndex].x - 0.5) * data.size;
	float3 offsetUp = CameraDirUp * (texCoords[vertexIndex].y - 0.5) * -data.size;

	float3 worldPosition = mul(ObjectToWorldMatrix, float4(data.position, 1.0)) + offsetRight + offsetUp;
	float4 screenPosition = mul(WorldToScreenMatrix, float4(worldPosition, 1.0));

	VS_OUT ret;
	ret.Position = screenPosition;
	ret.TexCoords = texCoords[vertexIndex];
	ret.Color = RGBA8ToFloat4(data.color);

	return ret;
}

#endif


[PIXELSHADER]

#define USE_TEXCOORD0
#define USE_COLOR

#include <Shaders/Materials/MaterialInterpolator.inc>

#if EZ_ENABLED(PLATFORM_DX11)

Texture2D ParticleTexture;
SamplerState ParticleTexture_AutoSampler;

float4 main(PS_IN Input) : SV_Target
{
  float4 color = ParticleTexture.Sample(ParticleTexture_AutoSampler, Input.TexCoords.xy);

  return float4(color.rgb * Input.Color.rgb * Input.Color.a, color.a);
}

#endif

