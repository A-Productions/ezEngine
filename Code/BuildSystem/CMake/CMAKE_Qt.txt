#cmake

if (EZ_ENABLE_QT_SUPPORT AND EZ_QTPROJECT)
  # this include-dir is necessary, so that headers generated by UIC can be found via #include <Projects/ProjectName/ui_widgetname.h>
  include_directories (${CMAKE_BINARY_DIR})
  # Add 'EZ_USE_QT' define
  add_definitions (-DEZ_USE_QT)
  
  if (NOT ${EZ_QT_DIR} STREQUAL ${EZ_QT_DIR_FOUND})
    # Need to reset qt vars now so that 'find_package' is re-executed
    # Additional entries required once more than 'Widgets' is used.
    set (Qt5Core_DIR "" CACHE PATH "" FORCE)
    set (Qt5Gui_DIR "" CACHE PATH "" FORCE)
    set (Qt5Widgets_DIR "" CACHE PATH "" FORCE)
    
    set (EZ_QT_DIR_FOUND ${EZ_QT_DIR} CACHE PATH "" FORCE)    
  endif()
  
	if (NOT QT5_FOUND)
    # now force QT to search in the correct folder
   	if (BUILDSYSTEM_PLATFORM_WINDOWS)
	    if (BUILDSYSTEM_PLATFORM_64BIT)
	      set (CMAKE_PREFIX_PATH ${EZ_QT_DIR} "C:\\Program Files (x86)\\Windows Kits\\8.0\\Lib\\win8\\um\\x64")
	    else()
	      set (CMAKE_PREFIX_PATH ${EZ_QT_DIR} "C:\\Program Files (x86)\\Windows Kits\\8.0\\Lib\\win8\\um\\x86")
	    endif()
	  else()
	    set (CMAKE_PREFIX_PATH ${EZ_QT_DIR})
	  endif()
  
    # we will need at least widgets (which includes core and gui), so we can run uic, moc and qrc
    # so search for it now so all qt paths are correctly set.
    find_package (Qt5Widgets REQUIRED PATHS ${EZ_QT_DIR})
  endif ()
endif ()


