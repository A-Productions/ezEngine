#cmake

# Get the name of this folder
get_filename_component (CUR_FOLDER_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
get_filename_component (PARENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} PATH)
get_filename_component (PARENT_FOLDER_NAME ${PARENT_FOLDER} NAME_WE)

# the library name
set (PROJECT_NAME "${CUR_FOLDER_NAME}")
set (PROJECT_FOLDER_NAME ${CUR_FOLDER_NAME})

message (STATUS "Adding Library: ${PROJECT_NAME}")

file(GLOB SOURCE_FILES_H "${CMAKE_CURRENT_SOURCE_DIR}/*.h" "${CMAKE_CURRENT_SOURCE_DIR}/*.inl")
file(GLOB SOURCE_FILES_C "${CMAKE_CURRENT_SOURCE_DIR}/*.c")
file(GLOB SOURCE_FILES_CPP "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")

set (LIST_SOURCE_GROUP_FOLDER "")
set (LIST_CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR})
set (ALL_SOURCE_FILES "")

ez_all_vars()

include (${EZ_CMAKE_UTILS_PATH}/CMAKE_LibraryFolder.txt)

#set(ALL_SOURCE_FILES ${SOURCE_FILES_H} ${SOURCE_FILES_C} ${SOURCE_FILES_CPP})

if (EZ_COMPILE_ENGINE_AS_DLL)
  add_library (${PROJECT_NAME} SHARED ${ALL_SOURCE_FILES})
else ()
  add_library (${PROJECT_NAME} ${ALL_SOURCE_FILES})
endif ()

ez_auto_pch(${PROJECT_NAME} "${ALL_SOURCE_FILES}")
ez_set_default_target_output_dirs(${PROJECT_NAME})
ez_set_common_target_include_dirs(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR})
ez_set_common_target_definitions(${PROJECT_NAME})
ez_set_build_flags(${PROJECT_NAME})
ez_set_library_properties(${PROJECT_NAME})
ez_set_project_ide_folder(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR})

ez_qt_wrap_target_files(${PROJECT_NAME} "${ALL_SOURCE_FILES}")

if (EZ_MOC_HEADERS)
	ez_qt_wrap_target_moc_files(${PROJECT_NAME} "${EZ_MOC_HEADERS}")
endif()

ez_ci_add_to_targets_list(${PROJECT_NAME} C++)

ez_generate_folder_unity_files_for_target(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR} ${SKIP_UNITY_FOR_FOLDER})



