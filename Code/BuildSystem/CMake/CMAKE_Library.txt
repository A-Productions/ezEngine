#cmake

# Get the name of this folder as the project name
get_filename_component (PROJECT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)

message (STATUS "Adding Library: ${PROJECT_NAME}")

ez_all_vars()

ez_glob_source_files(${CMAKE_CURRENT_SOURCE_DIR} ALL_SOURCE_FILES)

if (EZ_COMPILE_ENGINE_AS_DLL)
  add_library (${PROJECT_NAME} SHARED ${ALL_SOURCE_FILES})
else ()
  add_library (${PROJECT_NAME} ${ALL_SOURCE_FILES})
endif ()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${ALL_SOURCE_FILES})

ez_auto_pch(${PROJECT_NAME} "${ALL_SOURCE_FILES}")
ez_set_default_target_output_dirs(${PROJECT_NAME})
ez_set_common_target_include_dirs(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR})
ez_set_common_target_definitions(${PROJECT_NAME})
ez_set_build_flags(${PROJECT_NAME})
ez_set_library_properties(${PROJECT_NAME})
ez_set_project_ide_folder(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR})

ez_qt_wrap_target_files(${PROJECT_NAME} "${ALL_SOURCE_FILES}")

if (EZ_MOC_HEADERS)
	ez_qt_wrap_target_moc_files(${PROJECT_NAME} "${EZ_MOC_HEADERS}")
endif()

ez_ci_add_to_targets_list(${PROJECT_NAME} C++)

ez_generate_folder_unity_files_for_target(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR} ${SKIP_UNITY_FOR_FOLDER})



