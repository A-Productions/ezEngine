# Get the name of this folder as the project name
get_filename_component (PROJECT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)

message (STATUS "Adding Application: ${PROJECT_NAME}")

ez_pull_all_vars()

ez_glob_source_files(${CMAKE_CURRENT_SOURCE_DIR} ALL_SOURCE_FILES)

# Setup package if necessary
# TODO: Move to somewhere else
if (EZ_CMAKE_PLATFORM_WINDOWS_UWP)
  set(CONTENT_DIRECTORY_DST "${CMAKE_CURRENT_BINARY_DIR}/Assets/")
  set(CONTENT_DIRECTORY_SRC "${CMAKE_SOURCE_DIR}/Data/Platform/UWP/")

  # Copy content files.
  set(UWP_ASSET_NAMES
      "LockScreenLogo.scale-200.png"
      "SplashScreen.scale-200.png"
      "Square44x44Logo.scale-200.png"
      "Square44x44Logo.targetsize-24_altform-unplated.png"
      "Square150x150Logo.scale-200.png"
      "StoreLogo.png"
      "Wide310x150Logo.scale-200.png"
      "Windows_TemporaryKey.pfx")

  FOREACH(contentFile ${UWP_ASSET_NAMES})
    configure_file(${CONTENT_DIRECTORY_SRC}${contentFile} ${CONTENT_DIRECTORY_DST}${contentFile} COPYONLY)
    list(APPEND UWP_ASSETS ${CONTENT_DIRECTORY_DST}${contentFile})
  ENDFOREACH(contentFile)

  set_property(SOURCE ${UWP_ASSETS} PROPERTY VS_DEPLOYMENT_LOCATION "Assets")
  set_property(SOURCE ${UWP_ASSETS} PROPERTY VS_DEPLOYMENT_CONTENT 1)

  # Create Manifest from template.
  get_filename_component(SHORT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
  set(IDENTITY_NAME "${SHORT_NAME}-${CONFIGURATION_DESC}")
  set(PACKAGE_GUID 3370B74B-62B8-4009-828B-01A02CB4AB56)
  string(UUID PACKAGE_GUID NAMESPACE ${PACKAGE_GUID} NAME "ezEngine!" TYPE MD5) # Generate GUID

  # Add spatial perception to appx manifest if we're linking against WindowsMixedReality.
  #if (WindowsMixedReality IN_LIST LINK_LIBRARIES)
    #set(EXTRA_APP_CAPABILITIES "<uap2:Capability Name=\"spatialPerception\"/>")
  #endif()

  configure_file(${CONTENT_DIRECTORY_SRC}/package_template.appxmanifest ${CONTENT_DIRECTORY_DST}Package.appxmanifest @ONLY)

  list(APPEND UWP_ASSETS ${CONTENT_DIRECTORY_DST}Package.appxmanifest)

  # Include all content.
  source_group("Assets" FILES ${UWP_ASSETS})
  set(CONTENT_FILES ${CONTENT_FILES} ${UWP_ASSETS})
endif()

# Define the Exe Project, add all required sources to it
add_executable (${PROJECT_NAME} ${ALL_SOURCE_FILES} ${CONTENT_FILES})

ez_auto_pch(${PROJECT_NAME} "${ALL_SOURCE_FILES}")
ez_set_default_target_output_dirs(${PROJECT_NAME})
ez_add_target_folder_as_include_dir(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR})
ez_set_common_target_definitions(${PROJECT_NAME})
ez_set_build_flags(${PROJECT_NAME})
ez_set_application_properties(${PROJECT_NAME})
ez_set_project_ide_folder(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR})

ez_qt_wrap_target_files(${PROJECT_NAME} "${ALL_SOURCE_FILES}")

# UWP has deployment problems if all applications output to the same path.
if (EZ_CMAKE_PLATFORM_WINDOWS_UWP)
  set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY                "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG          "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE        "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL     "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO}/${PROJECT_NAME}"
  )
endif()

ez_ci_add_to_targets_list(${PROJECT_NAME} C++)

