#cmake

# Get the name of this folder
# Get the name of this folder
get_filename_component (CUR_FOLDER_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
get_filename_component (PARENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} PATH)
get_filename_component (PARENT_FOLDER_NAME ${PARENT_FOLDER} NAME_WE)

# the library name
set (PROJECT_NAME "${CUR_FOLDER_NAME}")
set (PROJECT_FOLDER_NAME ${CUR_FOLDER_NAME})

message (STATUS "Adding Application: ${PROJECT_NAME}")

if (EZ_ENABLE_QT_SUPPORT)
  # this include-dir is necessary, so that headers generated by UIC can be found via #include <ui_bla.h>
  include_directories (${CMAKE_CURRENT_BINARY_DIR})

	if (NOT QT4_FOUND)
		find_package (Qt4 REQUIRED COMPONENTS QtCore QtGui ${ARGN})

		set (QT_USE_QTOPENGL 1)

		include (${QT_USE_FILE})

		include_directories (AFTER "${QT_QTCORE_INCLUDE_DIR}/..")
		link_directories (${QT_LIBRARY_DIR})
	endif ()
endif ()

set (LIST_SOURCE_GROUP_FOLDER "")
set (LIST_CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR})
set (ALL_SOURCE_FILES "")

include (${CMAKE_SOURCE_DIR}/Code/BuildSystem/CMake/CMAKE_LibraryFolder.txt)



set (APP_CONFIG "")

if (IS_WIN32_APPLICATION)
	set (APP_CONFIG "WIN32")
endif ()


# Define the Exe Project, add all required sources to it
add_executable (${PROJECT_NAME} ${APP_CONFIG} ${ALL_SOURCE_FILES})

target_link_libraries (${PROJECT_NAME} ${LINK_LIBRARIES} ${QT_LIBRARIES} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
SET_PROPERTY(TARGET ${PROJECT_NAME} PROPERTY FOLDER "Projects")

if (BUILDSYSTEM_COMPILER_MSVC)
	target_link_libraries (${PROJECT_NAME} winmm)
endif ()

if (COMPILER_SETTINGS_ALL)
  set_target_properties (${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ${COMPILER_SETTINGS_ALL})
endif ()


if (LINKER_SETTINGS_ALL)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_ALL})
endif ()
if (LINKER_SETTINGS_DEBUG)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_DEBUG})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_DEBUG})

endif ()
if (LINKER_SETTINGS_RELEASE)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_RELEASE})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_RELEASE})
endif ()

