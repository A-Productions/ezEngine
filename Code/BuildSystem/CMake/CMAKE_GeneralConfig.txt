#cmake

#########################################################################################
## CMAKE Policies

# disables auto-linking to qtmain (new in Qt 5.1)
if (POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif ()

if (POLICY CMP0022)
  cmake_policy(SET CMP0022 NEW)
endif()

if (POLICY CMP0043)
  cmake_policy(SET CMP0043 NEW)
endif()

# enable error on add dependency not existing
if (POLICY CMP0046)
  cmake_policy(SET CMP0046 NEW)
endif ()

#########################################################################################
## Other configurations

set (COMPILER_SETTINGS_ALL "")
set (COMPILER_SETTINGS_RELEASE "")
set (COMPILER_SETTINGS_DEBUG "")

set (LINKER_SETTINGS_ALL "")
set (LINKER_SETTINGS_RELEASE "")
set (LINKER_SETTINGS_DEBUG "")

# set the default build type
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

#########################################################################################
## Detects the current platform

ez_detect_platform()

get_property(PLATFORM_PREFIX GLOBAL PROPERTY EZ_CMAKE_PLATFORM_PREFIX)
get_property(BUILDSYSTEM_PLATFORM_WINDOWS GLOBAL PROPERTY EZ_CMAKE_PLATFORM_WINDOWS)
get_property(BUILDSYSTEM_PLATFORM_WINDOWS_DESKTOP GLOBAL PROPERTY EZ_CMAKE_PLATFORM_WINDOWS_DESKTOP)
get_property(BUILDSYSTEM_PLATFORM_WINDOWS_UWP GLOBAL PROPERTY EZ_CMAKE_PLATFORM_WINDOWS_UWP)
get_property(BUILDSYSTEM_PLATFORM_WINDOWS_7 GLOBAL PROPERTY EZ_CMAKE_PLATFORM_WINDOWS_7)
get_property(BUILDSYSTEM_PLATFORM_POSIX GLOBAL PROPERTY EZ_CMAKE_PLATFORM_POSIX)
get_property(BUILDSYSTEM_PLATFORM_OSX GLOBAL PROPERTY EZ_CMAKE_PLATFORM_OSX)
get_property(BUILDSYSTEM_PLATFORM_LINUX GLOBAL PROPERTY EZ_CMAKE_PLATFORM_LINUX)


#########################################################################################
## Detects the current build-system / generator

ez_detect_generator()

get_property(BUILDSYSTEM_PREFIX GLOBAL PROPERTY EZ_CMAKE_GENERATOR_PREFIX)
get_property(BUILDSYSTEM_CONFIGURATION GLOBAL PROPERTY EZ_CMAKE_GENERATOR_CONFIGURATION)
get_property(BUILDSYSTEM_MSVC GLOBAL PROPERTY EZ_CMAKE_GENERATOR_MSVC)
get_property(BUILDSYSTEM_XCODE GLOBAL PROPERTY EZ_CMAKE_GENERATOR_XCODE)
get_property(BUILDSYSTEM_MAKE GLOBAL PROPERTY EZ_CMAKE_GENERATOR_MAKE)


#########################################################################################
## Detects the current compiler

ez_detect_compiler()

get_property(COMPILER_POSTFIX GLOBAL PROPERTY EZ_CMAKE_COMPILER_POSTFIX)
get_property(BUILDSYSTEM_COMPILER_MSVC GLOBAL PROPERTY EZ_CMAKE_COMPILER_MSVC)
get_property(BUILDSYSTEM_COMPILER_MSVC_140 GLOBAL PROPERTY EZ_CMAKE_COMPILER_MSVC_140)
get_property(BUILDSYSTEM_COMPILER_MSVC_141 GLOBAL PROPERTY EZ_CMAKE_COMPILER_MSVC_141)
get_property(BUILDSYSTEM_COMPILER_CLANG GLOBAL PROPERTY EZ_CMAKE_COMPILER_CLANG)
get_property(BUILDSYSTEM_COMPILER_GCC GLOBAL PROPERTY EZ_CMAKE_COMPILER_GCC)

#########################################################################################
## Detects the current architecture

ez_detect_architecture()

get_property(ARCHITECTURE_POSTFIX GLOBAL PROPERTY EZ_CMAKE_ARCHITECTURE_POSTFIX)
get_property(BUILDSYSTEM_PLATFORM_32BIT GLOBAL PROPERTY EZ_CMAKE_ARCHITECTURE_32BIT)
get_property(BUILDSYSTEM_PLATFORM_64BIT GLOBAL PROPERTY EZ_CMAKE_ARCHITECTURE_64BIT)


#########################################################################################
## Configuration Variables
## Add your variables here, if you need something (general) to configure from the cmake GUI

# Define GUI Variables to configure the project
if (BUILDSYSTEM_PLATFORM_WINDOWS)
  set (EZ_COMPILE_ENGINE_AS_DLL ON CACHE BOOL "Whether to compile the code as a shared libraries (DLL).")
endif()

set (EZ_ENABLE_QT_SUPPORT ON CACHE BOOL "Whether to add Qt support.")
set (EZ_QT_DIR $ENV{QTDIR} CACHE PATH "Directory of qt installation")
set (EZ_QT_DIR_FOUND "NOT_FOUND" CACHE PATH "Last found directory of qt installation")
mark_as_advanced(FORCE EZ_QT_DIR_FOUND)
set (EZ_USE_PCH ON CACHE BOOL "Whether to use Precompiled Headers.")
set (EZ_BUILD_PHYSX OFF CACHE BOOL "Whether support for nVidia PhysX should be added")
set (EZ_BUILD_KRAUT ON CACHE BOOL "Whether support for Kraut should be added")
set (EZ_BUILD_FMOD OFF CACHE BOOL "Whether support for FMod should be added")
set (EZ_BUILD_OFFICIAL_FBX_SDK OFF CACHE BOOL "Whether to use the official Autodesk FBX SDK or not")
set (EZ_BUILD_OPENVR OFF CACHE BOOL "Whether support for OpenVR aka. SteamVR should be added")
set (EZ_ENABLE_FOLDER_UNITY_FILES ON CACHE BOOL "Whether unity cpp files should be created per folder")
set (EZ_ENABLE_PVS_STUDIO_HEADER_IN_UNITY_FILES ON CACHE BOOL "Adds the necessary comment to the generated unity files for PVS checking")
set (EZ_ENABLE_MIXEDREALITY_SUPPORT OFF CACHE BOOL "Whether to add support for Windows Mixed Reality.")

set (EZ_OUTPUT_DIRECTORY_LIB "${CMAKE_SOURCE_DIR}/Output/Lib" CACHE PATH "Where to store the compiled .lib files.")
set (EZ_OUTPUT_DIRECTORY_DLL "${CMAKE_SOURCE_DIR}/Output/Bin" CACHE PATH "Where to store the compiled .dll files.")


#########################################################################################
## set output-path for binaries

set (OUTPUT_LIB_DEBUG       "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Debug${ARCHITECTURE_POSTFIX}")
set (OUTPUT_LIB_RELEASE     "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Release${ARCHITECTURE_POSTFIX}")
set (OUTPUT_LIB_MINSIZE     "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}MinSize${ARCHITECTURE_POSTFIX}")
set (OUTPUT_LIB_RELWITHDEB  "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}RelDeb${ARCHITECTURE_POSTFIX}")

set (OUTPUT_DLL_DEBUG       "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Debug${ARCHITECTURE_POSTFIX}")
set (OUTPUT_DLL_RELEASE     "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Release${ARCHITECTURE_POSTFIX}")
set (OUTPUT_DLL_MINSIZE     "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}MinSize${ARCHITECTURE_POSTFIX}")
set (OUTPUT_DLL_RELWITHDEB  "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}RelDeb${ARCHITECTURE_POSTFIX}")

message (STATUS "CMAKE_SOURCE_DIR is: ${CMAKE_SOURCE_DIR}")
message (STATUS "Output Folder for DLLs is: ${EZ_OUTPUT_DIRECTORY_DLL}")
message (STATUS "Output Folder for Libs is: ${EZ_OUTPUT_DIRECTORY_LIB}")

set (CMAKE_RUNTIME_OUTPUT_DIRECTORY                 "${OUTPUT_DLL_DEBUG}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG           "${OUTPUT_DLL_DEBUG}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE         "${OUTPUT_DLL_RELEASE}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL      "${OUTPUT_DLL_MINSIZE}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO  "${OUTPUT_DLL_RELWITHDEB}")

set (CMAKE_LIBRARY_OUTPUT_DIRECTORY                 "${OUTPUT_LIB_DEBUG}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG           "${OUTPUT_LIB_DEBUG}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE         "${OUTPUT_LIB_RELEASE}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL      "${OUTPUT_LIB_MINSIZE}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO  "${OUTPUT_LIB_RELWITHDEB}")

set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY                 "${OUTPUT_LIB_DEBUG}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG           "${OUTPUT_LIB_DEBUG}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE         "${OUTPUT_LIB_RELEASE}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL      "${OUTPUT_LIB_MINSIZE}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO  "${OUTPUT_LIB_RELWITHDEB}")

#Write configuration to file, as this is done at configure time we must pin the configuration in place (RelDeb is used because all build machines use this).
file(WRITE ${CMAKE_BINARY_DIR}/Configuration.txt "")
set(CONFIGURATION_DESC "${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}RelDeb${ARCHITECTURE_POSTFIX}")
file(APPEND ${CMAKE_BINARY_DIR}/Configuration.txt ${CONFIGURATION_DESC})


#########################################################################################
## Compiler specific settings
set(CMAKE_CXX_STANDARD 14)
if (BUILDSYSTEM_COMPILER_MSVC)
  # Enable minimal rebuild
  #set (COMPILER_SETTINGS_DEBUG "${COMPILER_SETTINGS_DEBUG} /Gm")
  # enable multi-threaded compilation
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /MP")
  # disable RTTI
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /GR-")
  # use fast floating point model
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /fp:fast")
  # enable floating point exceptions
  #set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /fp:except")
  # enable default exception handling
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /EHsc")
  if (NOT BUILDSYSTEM_PLATFORM_WINDOWS_UWP)
    # disable permissive mode (unless UWP as the win SDK is not standard conform)
    set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /permissive-")
  endif()
  # enable standard conform casting behavior - casting results always in rvalue
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /Zc:rvalueCast")

  # enable strict warnings
  #if (EZ_STRICT_WARNINGS)
  #  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /W4")
  #endif()
  # treat warnings as errors
  # Todo: We're not there yet for Clang on windows.
  if (NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /WX")
  endif()

  if (BUILDSYSTEM_PLATFORM_32BIT)
    # enable SSE2 (incompatible with /fp:except)
    set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /arch:SSE2")
  endif ()

  if(MSVC11 OR MSVC12)
    set (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /d2Zi+")
    set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /d2Zi+")
  endif()

  set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Ob1")
  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Ox /Ob2 /Oi")
  set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox /Ob2 /Oi")

  set (LINKER_SETTINGS_RELEASE "${LINKER_SETTINGS_RELEASE} /INCREMENTAL:NO")
  # Remove unreferenced data (does not work together with incremental build)
  set (LINKER_SETTINGS_RELEASE "${LINKER_SETTINGS_RELEASE} /OPT:REF")
  # Don't know what it does, but Clemens wants it :-) (does not work together with incremental build)
  set (LINKER_SETTINGS_RELEASE "${LINKER_SETTINGS_RELEASE} /OPT:ICF")

  # Enable SSE4.1 for Clang on Windows.
  # Todo: In general we should make this configurable. As of writing SSE4.1 is always active for windows builds (independent of the compiler)
  if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")
  endif()

elseif (BUILDSYSTEM_COMPILER_CLANG)
  # Cmake complains that this is not defined on OSX make build.
  if(EZ_COMPILE_ENGINE_AS_DLL)
    set (CMAKE_CPP_CREATE_DYNAMIC_LIBRARY ON)
  else ()
    set (CMAKE_CPP_CREATE_STATIC_LIBRARY ON)
  endif ()
  # Enable c++11 features
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -stdlib=libc++")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")

elseif (BUILDSYSTEM_COMPILER_GCC)
  # dynamic linking will fail without fPIC (plugins)
  # Wno-enum-compare removes all annoying enum cast warnings
  # std=c++14 is - well needed for c++14.
  # gdwarf-3 will use the old debug info which is compatible with older gdb versions.
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wno-enum-compare -std=c++14 -mssse3 -mfpmath=sse -gdwarf-3")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -gdwarf-3")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")

else ()
  message (FATAL_ERROR "Not settings are defined for the selected compiler. Please extend CMAKE_GeneralConfig.txt.")
endif ()


#########################################################################################
## Code that depends on the values of the configuration variables

if (EZ_COMPILE_ENGINE_AS_DLL)
    message (STATUS "Linking to the Engine through DLLs.")
    add_definitions (-DBUILDSYSTEM_COMPILE_ENGINE_AS_DLL)
else ()
    message (STATUS "Linking to the Engine through Static Libraries.")
endif ()

add_definitions (-DBUILDSYSTEM_CONFIGURATION="${BUILDSYSTEM_CONFIGURATION}")

#########################################################################################
## Windows Mixed Reality support (UWP only)

if (EZ_ENABLE_MIXEDREALITY_SUPPORT AND BUILDSYSTEM_PLATFORM_WINDOWS_UWP)
  add_definitions (-DBUILDSYSTEM_ENABLE_MIXEDREALITY_SUPPORT)
endif()

#########################################################################################
## Macro to enable pre-compiled headers

MACRO(ADD_MSVC_PRECOMPILED_HEADER)
  IF(MSVC)
    set (PCH_FOUND false)
    set (PCH_CPP "")
    set (PCH_H "")

    foreach (src_file ${ALL_SOURCE_FILES})
      GET_FILENAME_COMPONENT(RawFilename ${src_file} NAME_WE)
      GET_FILENAME_COMPONENT(Extension ${src_file} EXT)

      if (${Extension} STREQUAL ".cpp")
        if (RawFilename MATCHES "PCH$")
          set (PCH_FOUND true)
          set (PCH_CPP "${RawFilename}.cpp")
          set (PCH_H "${RawFilename}.h")
        endif()
      endif ()

    endforeach ()

    if (NOT EZ_USE_PCH)
      set (PCH_FOUND false)
    endif()

    if (PCH_FOUND)
      set_source_files_properties(${PCH_CPP} PROPERTIES COMPILE_FLAGS "/Yc${PCH_H}")

      # Remove CMAKE's increase of the max pre-compiled header size (/Zm1000)
      # as this will cause C1027 errors during compiling due to ASLR.
      if (NOT CMAKE_CXX_FLAGS)
        message (FATAL_ERROR "CMAKE_CXX_FLAGS is empty! Cause unknown but clear cache and rerun configure solves the problem.")
      endif ()

      string(REGEX REPLACE "/Zm[0-9]+ *" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
      # Force the above change into the cache.
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" CACHE STRING "" FORCE)


      foreach (src_file ${ALL_SOURCE_FILES})
        GET_FILENAME_COMPONENT(RawFilename ${src_file} NAME_WE)
        GET_FILENAME_COMPONENT(Extension ${src_file} EXT)

        if (${Extension} STREQUAL ".cpp")
          if (NOT RawFilename MATCHES "PCH$")
            # We don't want to enable PCH usage for QRC files (they all start with qrc_)
            #if (NOT ${src_file} MATCHES ".*(/moc_|/qrc_).*")
			if (NOT ${src_file} MATCHES ".*(/qrc_).*")
              set_source_files_properties (${src_file} PROPERTIES COMPILE_FLAGS "/Yu${PCH_H}")
            endif ()
          endif ()
        endif ()

      endforeach ()

    endif()

  ENDIF(MSVC)
ENDMACRO(ADD_MSVC_PRECOMPILED_HEADER)


#########################################################################################
## Macro to include directX dependencies

MACRO(BUILD_REQUIRES_DX11)
  if (${BUILDSYSTEM_PLATFORM_WINDOWS})
    set (EZ_REQUIRES_DX11 ON)
    find_package (DirectX11)
    set (LINK_LIBRARIES ${LINK_LIBRARIES} ${DirectX11_D3D11_LIBRARIES})
  else ()
    get_filename_component (BUILD_REQUIRES_DX11_MACRO_FOLDERNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
    message (FATAL_ERROR "Platform '${CMAKE_SYSTEM_NAME}' does not support DirectX.")
  endif ()
ENDMACRO()

MACRO(DX11_COPY_DLLS)
  if (${EZ_REQUIRES_DX11})
    if (${BUILDSYSTEM_PLATFORM_64BIT})
       set (DX11_COPY_DLLS_BIT "x64")
    else ()
       set (DX11_COPY_DLLS_BIT "x86")
    endif ()

    if( ${DirectX11_LIBRARY} MATCHES "/8\\.0/")
       set (DX11_COPY_DLLS_WINSDKVERSION "8.0")
       set (DX11_COPY_DLLS_DLL_VERSION "46")
    elseif( ${DirectX11_LIBRARY} MATCHES "/8\\.1/")
       set (DX11_COPY_DLLS_WINSDKVERSION "8.1")
       set (DX11_COPY_DLLS_DLL_VERSION "47")
    elseif( ${DirectX11_LIBRARY} MATCHES "/10/")
       set (DX11_COPY_DLLS_WINSDKVERSION "10")
       set (DX11_COPY_DLLS_DLL_VERSION "47")
    endif ()

    if (${DX11_COPY_DLLS_WINSDKVERSION})
      add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "%ProgramFiles(x86)%/Windows Kits/${DX11_COPY_DLLS_WINSDKVERSION}/Redist/D3D/${DX11_COPY_DLLS_BIT}/d3dcompiler_${DX11_COPY_DLLS_DLL_VERSION}.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>)
    endif ()
  endif ()
ENDMACRO()


#########################################################################################
## Macro to skip a Qt-only project if EZ_ENABLE_QT_SUPPORT is not enabled globally

MACRO(BUILD_REQUIRES_QT)
  if (EZ_QTPROJECT AND NOT EZ_ENABLE_QT_SUPPORT)
    get_filename_component (BUILD_REQUIRES_QT_MACRO_FOLDERNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
    Message (STATUS "Skipping ${BUILD_REQUIRES_QT_MACRO_FOLDERNAME}. Requires Qt which is disabled.")
    return ()
  endif ()
ENDMACRO()


#########################################################################################
## Macro to enable qt support for this library / project and store the required modules

MACRO(QT_MODULES modules)
  SET (EZ_QTPROJECT ON)
  SET (EZ_QT_MODULES ${ARGV})
ENDMACRO()


#########################################################################################
## Macro to write the current project into the target list file

MACRO(ADD_TO_TARGET_LIST language)
  file(RELATIVE_PATH ADD_TO_TARGET_LIST_MACRO_FOLDERNAME ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
  file(APPEND ${CMAKE_BINARY_DIR}/Targets.txt "${PROJECT_NAME}|${ADD_TO_TARGET_LIST_MACRO_FOLDERNAME}|0|${language}|${LINK_LIBRARIES}\n")
ENDMACRO()


#########################################################################################
## Macro to write the current project into the tests list file

MACRO(ADD_TEST needs_hardware_access)
  set (ADD_TEST_MACRO_HWA 0)
  if (${needs_hardware_access})
    set (ADD_TEST_MACRO_HWA 1)
  else ()
    set (ADD_TEST_MACRO_HWA 0)
  endif ()

  get_filename_component (ADD_TEST_MACRO_FOLDERNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)

  file(APPEND ${CMAKE_BINARY_DIR}/Tests.txt "${ADD_TEST_MACRO_FOLDERNAME}|${ADD_TEST_MACRO_HWA}|0\n")
ENDMACRO()


#########################################################################################
## Include directories

include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../Engine")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../Tools")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../Plugins")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../Games")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../Samples")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../UnitTests")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../ThirdParty")

